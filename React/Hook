useEffect 
useEffect(() => {
    console.log('use Effect RAN');
}, [counter])


useEffect 두번째 인자 Array 가 업데이트가 되면 첫번째 인자가 실행이
된다   ==>(component did update)

만약 두번째 인자를 비우면 컴포넌트가 did mount 할때 첫번째 함수를
불러라~ ==> (component did mount)
     {맨처음에 컴포넌트가 마운드가 됬을때만 실행이 된다}


여기서 useEffect 기능 중 한가지가 더 있는데

useEffect(() => {
    console.log('use Effect RAN');

    //Unmount
    return () => {
        console.log('Unmount')
    }

}, [] )

리턴에 함수를 집어넣으면 함수안에 들어가는 값이 컴포넌트가 언마운트가
되었을 때 실행을 하게됨 ((이 컴포넌트가 사라졌을 때))
==> (언제 쓰냐??)  socket IO 쓰면 혹은 STREAM 

useEffect(() => {
    //SOCKET IO OPEN
    console.log('use Effect RAN');

    //Unmount
    return () => {
        //SOCKET IO CLOSE
        console.log('Unmount')
    }

}, [] )


custom Hook 

코드가 길어지면 복잡해지니 개인이 보기쉽게 잘 만들자 


useState 

데이터는 변수에 넣던가 state에 넣던가 

useState 사용방법

let [a,b] = useState()   (useState 는 array  두개를 반환한다 현재값, 현재값을 수정하기위한 함수 
                          [state 데이터], [state 데이터 변경 함수 ]

--> 이건 js 신문법  ES6 destructuring     var [a,b] = [10,100]

기존에는 하나하나 대입해주었어야 했다 

useState('') 안에 여러 데이터 저장 가능  (문자,숫자,array,object)

ex) useState(['남자코트','여자코트'])

{ a[0] } ==남자코트

state 쓰는 이유   : 웹이 App처럼 동작하게 만들고 싶어서  그러면 중요한 데이터는
모두 state 에 저장
간혹 글제목이라든 변경이 되거나 순서가 바뀔 때 사용
--> 그렇게 글제목이 바뀌게되면(state 로 만들어진 데이터가 바뀌면)  !! 데이터를 담고있는
HTML 이 재렌더링 된다.       개중요!!!!!!!

그냥 변수로 만든 HTML 들은 데이터가 바껴도 재렌더링이 바로 되지않고 새로고침이 되어야
재렌더링이 된다 

state 로 만들어놓은 데이터들은   
사이트 내에서 state 조작 버튼이나 (정렬버튼을 눌렀거나, 제목을 수정하든가)  그럴 때
새로고침 없이도 HTML에 재렌더링이 이루어짐 
고로 == HTML 이 새로고침 없이도 스무스하게 변경됨 

자주 바뀌는, 중요한 데이터는 변수 말고 state로 저장해서 쓰세요 

그래서 잘생각해서 선택하기


코딩애플 유튜브 4강 

이벤트 리스너  
옛날자바 스크립트면 addEventListener , onClick

쉬운게 onClick 
리액트에서는 C가 대문자  그리고 중괄호로 적용 onClick={클릭될 떄 실행할 함수 } 
중괄호안에는 무조건 함수가 하나 딱 들어갈 수 있다.    표현식도 들어가면 안됨 

근데 여기 들어가는 함수가 만들기 귀찮다면  ={ () => { 실행할 내용} }

이거는 ES6 신문법 화살표 함수 
기존에 함수 만들고 콜백을 넣을때
-> addEventListener('click', function() { } ) 

이제 arrow 함수
-> addEventListener('click', () => { } )
똑같은 문법이고 this라는 값만 달라지지 

클릭시 state 값 변경 예제
let [ like, setLice ] =useState(0)

onClick={ ()=> { like + 1} }    불가!!

state는 그냥 변경이 안됨!!!

setLike로 항상 다루어주어야함 

그러므로 
onClick = { () => { setLike( like + 1) } }
꼭 이벤트안에 넣어야 한다 (상황에 보구)  이렇게 이벤트로 넣어서 변경해야 재렌더링이 이루어짐

그냥 바깥에두면 계속 재렌더링이 이루어질 수 있음






