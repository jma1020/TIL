arrow function

화살표 함수 
  화살표 함수는 함수 표현식에서의 익명 함수를 선언하여 변수를 대입하는 방법과 유사하다  
  
  표현식과 다른점이라면 function 대신 => 로 변환!!


  1.  let add = (first,second) => {
	return first+second
	}
	  이거는 기본적인 화살표 함수로 변형한 것 

  2.  let add = (first,second) => first+second
	  본문 블록이 비어있고 결과값을 바로 반환하는 경우에 중괄호 생략하고 =>(화살표) 뒤에 반환식을 넣을 수
	  있다 
  3.  let addAndMultiple = (first,second) => ({add:first+second , multiple:first*second}) 
	  반환값이 객체라면 괄호로 결과값을 감싸 간결하게 표현한다. 


  화살표 함수는 이렇게 함수 표현식을 간결하게 해주고 , 심화 버전인 커링(currying) 같은 패턴에서 사용되는 함수를
  반환할 때 ' 계단형 함수 선언' 같은 구조가 만들어지지 않게 해준다는 장점이 있다. 

  eg) 
	let addNumber = function(num) {
	  return function(value) {
	    return num+value
	  }
	}
	  이렇게 게단형 함수를 

	let addNumber =num => value => num+value 



다음으로 또한 화살표 함수는 콜백 함수의 this 범위로 생기는 오류를 피하기 위해 bind() 함수를 사용하여 
this 객체를 전달하는 과정을 포함하고 있다. 

  eg)	
	class Myclass { 
	  value = 10;
	  constructor() {
	    var addThis2 = function(first,second) {
	      return this.value + first + second 
	    }.bind(this)
	    var addThis3 = (first,second) => this.value +first + second
	  }
	}
	  addThis2() 함수는 this를 bind() 함수에 전달하여 this 범위를 유지하고 있고, addThis3() 함수의 경우 
	  화살표 함수이므로 이 과정을 생략했다고 볼 수 있다. 
	  ===>> ES6에서는 함수 내부에서 this가 전역객체를 바라보는 문제를 보완하고자, this를 바인딩하지 않는 
		화살표 함수를 새로 도입했다.

	화살표 함수는 실행 컨텍스트를 생성할 때 this 바인딩 자체가 빠지게 되어, 상위 스코프의 this를 
	그대로 활용할 수 있다 





화살표 함수와 일반함수의 this 차이점 설명

  일반 함수는 함수를 선언할 때 this에 바인딩할 객체가 정적으로 결정되는 것이 아니구, 함수를 호출할 때 함수가
  어떻게 호출되었는지에 따라 this에 바인딩할 객체가 동적으로 ((런타임에?)) 결정되는 것이다.

  하지만 화살표 함수에서는 무조건 상위 스코프의 this를 가르키고 있어서 화살표 함수는 함수를 선언할 때 this에 
  바인딩할 객체가 정적으로 결정됩니다.  -- 이를 lexical this 라고 칭함 

  eg)
	function foo() {
	  return (a) => {
	    console.log(this.a)    // 여기서 this 는 상위 스코프인 foo에서 상속댐
	  }

	let obj1 = {
	  a:2
	}

	let obj2 = {
	  a:3
	}

	let bar = foo.call(obj1);
	bar.call(obj2);  //2

	다들 여기서 bar.call(obj2) 가 3이 된다고 생각한다. 

	일단 foo() 함수 내부에서 생성된 화살표 함수는 foo() 호출 당시 this 를 무조건 어휘적으로 상속 받는다. 
	foo()함수는 call() 메서드로 obj1에 this 가 바인딩 되므로 변수 bar (return된 화살표 함수를 가리키는)의
	this 역시 obj1로 바인딩 된다 
	
	하지만 bar.call(obj2) 는 bar 의 this 가 바뀌는 거고 foo는 obj1로 call 되있는거는 여전해서 bar에 의해서
	달라지지 않는다 .  화살표 함수 this는 무조건 상위 스코프 foo() 이기 때문에 



  화살표 함수는 이벤트 처리기나 타이머 등의 콜백에 널리 쓰입니다. 
  이번엔 return 객체 안에 정의된 메서드에 setTimeout 을 넣어서 실행하였을 때의 this를 알아보자 

	function foo() {
	  return {
	    first: 'soo',
	    last:'kim'
	    asyncFn: function() {
		console.log(this);
		
		setTimeout(() => {
		  console.log(this.first)
		},1000)
	    }
	  }
	}
	let bar = foo()
	bar.asyncFn()  //soo

	foo() 함수를 실행하면 객체를 리턴한다. 리턴되는 객체 안에는 asyncFn() 라는 메서드가 있고 이 메서드는 1초 후에 
	this.first 를 출력하는 함수이다.
	변수 bar에 foo() 함수를 실행하여 return 되는 객체를 담았고, bar.asyncFn()를 실행하여 1초 후에 this.first 값인 
	'soo' 를 잘 출력한다

	여기서 먼저 알아둘게 있는데, setTimeout() 에서의 this 는 항상 window를 가르킨다. 왜냐하면 setTimeout()은
	window.setTimeout 으로 환경설정되어있다. 실제로 저 화살표함수를 일반함수로 바꾸면 this.first 값은 undefined
	이다.  window 에서는 first 라는 속성을 정의한 적이 없기때문이다 
	
	그런데 화살표 함수에서는 잘 출력되고 있다.  화살표에 this는 언제나 항상 상위 스코프의 this 를 상속받으니
	setTimeout()의 상위 스코프인 asyncFn() 에서 console로 this 값을 출력해본 결과 리턴된 객체를 가르키고 잇는
	것을 볼 수 있고 setTimeout()의 콜백함수로 작성한 화살표 함수는 상위 스코프의 this를 상속받아 리턴된 객체
	에서 first 를 찾을 수 있는 것이다. 






깔끔정리))))메서드는 화살표 함수 말고 일반 함수로 지정하자


 이벤트 핸들러안에서 쓴 화살표에 this 는 HTML 요소 ???????이거는 한번 봐보자 js this 에서 이벤트 핸들러는 HTML 요소 였으나
 화살표에서는 어떻게 되는건지 모르겠다. 


함수안 함수도 전역이였나????  정리 한번 더하기 


북마크 이름 :: 클래스도 함수처럼 마지막  여기서 메서드.. 이 북마크 다시보기


궁금한점  상위스코프를 함수로 치는 것 알겠는데 객체나 클래스는??

ES6 화살표 함수를 씁니다. ES6 화살표 함수는 this로 window 대신 상위 함수의 this를 가져옵니다(여기서는 <div>)


ps. 	var temp = item2;
	item2 = item1;
	item1 = temp;
	이거는 서로 요소가 바뀌는 swap 형식인데
	[item2, item1] = [item1, item2];  ES6로 가능 

다음시간 해야하는거 bind 정리 closer 유튜브영상 메서드 체이닝, 화살표함수 this 완변정리 


다음시간에 해야하는거 get, set, ㄹ 리액트 맨첨에 보던거 찾기   ,, 깔끔정리 한 번 더 하기 


리액트 훅과 리덕스에 관한거를 계속 찾아보고있었다 





