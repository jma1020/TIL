js this 사용법과 scope 

1. 단독으로 쓴 this --- 묻지도 따지지도 않고 this 사용하는 거는 global object 를 가리킨다(object window)

2. 함수에서 쓴 this  
 (1). non use strict --  
	function nonUse() {
		return this; 	
		}
        이거는 window 이다 
       
	let num = 0
	function nonUse() {
		this.num=100
		num++
		}

	num= 101 이된다 

        num 은 전역변수를 가르키게 된다  
        함수 안에서 this는 함수의 주인에게 바인딩 된다. - window 

        ps. 콜백함수로 일반함수가 올 경우 전역객체(window)를 가르킨다 

 (2). use strict --
 	위에 예제들이 전부 undefined 를 가르키는 것과 같다. 

3. 메서드안에서 쓴 this  
  	let num = 0;
	function showNum() {
		console.log(this.num) //0
	}
	showNum()

	let obj = {
	    num : 200,
	    func : showNum
	}

	obj.func()  //200 

      메서드 호출 시 메서드 내부 코드에서 사용된 this 는 해당 메서드를 호출한 객체로 바인딩 된다.

      ps. 메서드 속 함수의 this 는 전역객체를 가르킨다 
      ps2. 프로토타입 객체도 메서드를 가질 수 있다 , 또한 프로토타입 객체의ㅡ this도 해당 메서드를 
	호출한 객체를 바인딩한다

4. 이벤트 핸들러 안에서 쓴 this 
	var btn = document.querySelector('#btn')
	btn.addEventListener('clilck', function() {
		console.log(this)
	})
	//#btn

     이벤트 핸들러에서 this는 이벤트를 받는 HTML 요소를 가르킨다.

5. 생성자 안에서 쓴 this 
	
	!!생성자 함수가 생성하는 객체로 this가 바인딩 된다 

	function Person(name) {
 		this.name= name; 	
	}
	
	let kim = new Person('kim')
	let soo = new Person('soo')
	
	console.log(kim.name)
	console.log(soo.name)

	하지만!!! new 키워드를 빼먹는 순간 일반 함수 호출과 같아지기 때문에, 
	이 경우는 this 가 window에 바인딩됩니다 

	
6. 명시적 바인딩을 한 this 
	명시적 바인딩은 짝을 지어주는 것  ex) 이 this는 mine

	apply() 와 call() 메서드는 Function Object에 기본적으로 정의된 메서드, 인자를 this로 
	만들어주는 기능을 한다. 






!!!!!call() 과 apply() 메서드 한번 더 정리하기 

7. 화살표함수에서 this 

	함수 안에서 this 가 전연 객체가 되는 것을 원치 않을 때 사용하면 된다. 

	--> 화살표 함수는 전역 컨텍스트에서 실행되더라도 this 를 새로 정의하지 않고, 







property 단어 정리 

property 프로퍼티 는 객체안에 키를 부른다??
or 객체안에 키와 밸류를 통틀어서 칭하는 단어??

이런 객체에 property 값에서 함수가 발견되면 그거는  일반 함수와 구분하기 위해 메서드라고 칭한다.

위에 property 정의가 후자와 같다면 property key 로 (객체에 키) 유일하게 식별 가능하다. 그러면 즉, key 는 
property를 식별하기 위한 식별자이다.




함수와 method의 차이

method 
 일련의 동작을 한다는 점에서 흔히 함수와 헷갈리는 개념 
   	메서드를 수행하기 위해서는 객체를 통해서 해당 메서드를 수행하여야 한다.  즉 동작을 수행하는 주체는
	객체이니, 객체에게 그 동작을 수행하라고 지시해야 한다.  ex) foo.add()

	
함수 
	함수는 함수자체가 그 동작을 정의한 함수객체이기 떄문에 자기자신을 수행하는 것 



객체의 생성 

----> 이 부분은 공책을 보자 class 와 객체의 생성차이점 참고하기 
 

----> 객체 리터럴 방식과 생성자 함수 방식의 차이 






